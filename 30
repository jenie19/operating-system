#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// Function executed by threads
void *threadFunction(void *arg) {
    int thread_id = *(int *)arg;
    printf("Thread %d is running\n", thread_id);
    pthread_exit(NULL);
}

int main() {
    int num_threads = 5;
    pthread_t threads[num_threads];
    int thread_ids[num_threads];

    // Create threads
    for (int i = 0; i < num_threads; i++) {
        thread_ids[i] = i + 1;
        if (pthread_create(&threads[i], NULL, threadFunction, &thread_ids[i]) != 0) {
            perror("Thread creation failed");
            return 1;
        }
    }

    // Join threads
    for (int i = 0; i < num_threads; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("Thread join failed");
            return 1;
        }
    }

    // Equality check
    if (pthread_equal(threads[0], threads[1])) {
        printf("Thread 0 and Thread 1 are equal.\n");
    } else {
        printf("Thread 0 and Thread 1 are not equal.\n");
    }

    printf("All threads have finished execution.\n");

    // Exit program
    pthread_exit(NULL);

    return 0;
}
