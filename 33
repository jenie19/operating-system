#include <stdio.h>
#include <stdlib.h>

// Define the number of frames in memory
#define FRAME_SIZE 3

// Function to simulate Optimal Paging
void optimalPaging(int pages[], int num_pages) {
    int frames[FRAME_SIZE];
    int page_faults = 0;

    // Initialize frame array
    for (int i = 0; i < FRAME_SIZE; i++) {
        frames[i] = -1; // -1 indicates empty frame
    }

    for (int i = 0; i < num_pages; i++) {
        int page = pages[i];
        int is_page_fault = 1;

        // Check if page is already in a frame
        int frame_index = -1;
        for (int j = 0; j < FRAME_SIZE; j++) {
            if (frames[j] == page) {
                is_page_fault = 0;
                frame_index = j;
                break;
            }
        }

        if (is_page_fault) {
            page_faults++;

            // Find the page that will not be used for the longest period
            int optimal_index = 0;
            int farthest_use = i + 1;

            for (int j = 0; j < FRAME_SIZE; j++) {
                int k;
                for (k = i + 1; k < num_pages; k++) {
                    if (frames[j] == pages[k]) {
                        break;
                    }
                }
                if (k == num_pages) {
                    optimal_index = j;
                    break;
                } else if (k > farthest_use) {
                    farthest_use = k;
                    optimal_index = j;
                }
            }

            frames[optimal_index] = page;
            printf("Page %d inserted into frame %d\n", page, optimal_index);
        }
    }

    printf("\nTotal Page Faults: %d\n", page_faults);
}

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3}; // Sequence of page requests
    int num_pages = sizeof(pages) / sizeof(pages[0]);

    optimalPaging(pages, num_pages);

    return 0;
}
